Expand Drawing function
Some sort of Dota 2 Creep      Rays for recongnition of visible polygons(objects)      social 2m bubble * magnitude(creep = 1.0...)


GL & HF "I am ot sure if its over complex but i think that there is great abstraction potential for memory computation in neural netowrks"


//   k = networklayers       all   ||   backwards  ||    forwards    ||   booth  || (??  >   logic <3) "don't get greedy"
//   activationValue += parentLayer[n].Delta * nestedWeightsArray[n][k][o][i] + nestedBiasesArray[n][k][o][i]; forward                     


//   activationValue += parentLayer[n].Delta * nestedWeightsArray[0][0][n][k][o][i] + nestedBiasesArray[0][0][n][k][o][i];gate???  //activationValue += parentLayer[n].Delta * nestedWeightsArray[0][0][n][indexes[k]]][o][i] + nestedBiasesArray[0][0][n][neurodes[indexes[k]]][o][i]; k = index for neurodeID!?
//   activationValue += parentLayer[n].Delta * nestedWeightsArray[1][0][n][k][o][i] + nestedBiasesArray[1][0][n][k][o][i];//Buffer  //activationValue += parentLayer[n].Delta * nestedWeightsArray[1][0][n][indexes[k]]][o][i] + nestedBiasesArray[1][0][n][neurodes[indexes[k]]][o][i]; k = index for neurodeID!?

//   activationValue += parentLayer[n].Delta * nestedWeightsArray[0][0][n][k][o][i] + nestedBiasesArray[0][0][n][k][o][i];gate???
//bufferedGate?
//   activationValue += parentLayer[n].Delta * nestedWeightsArray[1][0][n][k][o][i] + nestedBiasesArray[1][0][n][k][o][i];//Buffer

// ######################################################################################################################################################################################################################################################################################################################
      
            public override void RunForward(Neurode[][] network)
            {
                if (type == 0)// [0][o] [0][o]      |       [1][o] [1][o]       &&      [>>]
                {
                    float activationValue = 0;
        
                    for (int i = 0; i < network.GetLength(0); n++)
                        for (int n = 0; n < network.GetLength(1); n++)
                            for (int o = 0; o < weights[n].Length; o++)
                                activationValue += network[i][n].Delta * nestedWeightsArray[0][o] + nestedBiasesArray[0][o];
        
                    if (Neurode.GetActivationValue(activationValue, type) != 0)
                    {
                        activationValue = 0;
        
                        for (int i = 0; i < network.GetLength(0); n++)
                            for (int n = 0; n < network.GetLength(1); n++)
                                for (int o = 0; o < weights[n].Length; o++)
                                    activationValue += network[i][n].Delta * nestedWeightsArray[1][o] + nestedBiasesArray[1][o];
        
                        delta = Neurode.GetActivationValue(activationValue, type);
                    }
                }    
        }

// This could be for example used in a AI based creature where the neural nets controlling muscles each contain some of those "[0][o] [0][o]      |       [1][o] [1][o]       &&      [>>]" neurodes to represent all other neural nets or there neurons as a whole...
// ######################################################################################################################################################################################################################################################################################################################



//   This is where the Dragons sleep  >_>

//   activationValue += parentLayer[n].Delta * nestedWeightsArray[0][0][n][k][o][i] + nestedBiasesArray[0][0][n][k][o][i];gate???  //activationValue(Buffer.txt) += parentLayer[n].Delta * nestedWeightsArray[0][0][n][indexes[k]]][o][i] + nestedBiasesArray[0][0][n][neurodes[indexes[k]]][o][i]; k = index for neurodeID!?
//   activationValue += parentLayer[n].Delta * nestedWeightsArray[1][0][n][k][o][i] + nestedBiasesArray[1][0][n][k][o][i];//Buffer  //activationValue(Buffer.txt) += parentLayer[n].Delta * nestedWeightsArray[1][0][n][indexes[k]]][o][i] + nestedBiasesArray[1][0][n][neurodes[indexes[k]]][o][i]; k = index for 
//   (??  >   logic <3)  ?????? activationValue += parentLayer[n].Delta * nestedWeightsArray[n][indexes[k]]][o][i] + nestedBiasesArray[n][neurodes[indexes[k]]][o][i]; forward??? k = index for neurodeID!? K logic < back loop ??????
